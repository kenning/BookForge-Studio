/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/files/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Files
         * @description Lists files in the specified directory type with recursive directory structure.
         */
        get: operations["list_files_api_files_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/serve/{filename}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Serve File */
        get: operations["serve_file_api_files_serve__filename__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/textcontent/{filename}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get File Text Content
         * @description Gets the text content of a file from any directory.
         */
        get: operations["get_file_text_content_api_files_textcontent__filename__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/save": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Save Generic File
         * @description Saves generic JSON content to a file in the specified directory type.
         */
        post: operations["save_generic_file_api_files_save_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/save-script": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Save Script
         * @description Saves a script to a JSON file in the specified directory type.
         */
        post: operations["save_script_api_files_save_script_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/load-script/{filename}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Load Script
         * @description Loads a script from a JSON file.
         */
        get: operations["load_script_api_files_load_script__filename__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload File
         * @description Upload a file from desktop drag and drop to input/dropped_files directory.
         */
        post: operations["upload_file_api_files_upload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/export-timeline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Export Timeline
         * @description Exports the current timeline by concatenating all active audio clips.
         */
        post: operations["export_timeline_api_files_export_timeline_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/steps/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Steps
         * @description Get a list of all available steps with their metadata.
         *
         *     Returns:
         *         List of step metadata dictionaries
         */
        get: operations["get_steps_api_steps__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/steps/execute-background": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Execute Steps Background
         * @description Execute a sequence of steps in the background and return an execution ID for monitoring.
         *
         *     Args:
         *         request: Contains the text input and list of step names to execute
         *
         *     Returns:
         *         Response containing execution ID for monitoring progress via WebSocket
         */
        post: operations["execute_steps_background_api_steps_execute_background_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/steps/reload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reload Steps
         * @description Reload all steps from the steps directory.
         *     Useful for development when adding new steps without restarting the server.
         */
        post: operations["reload_steps_api_steps_reload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/text-workflows/csv-to-psss": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Csv To Psss
         * @description Convert CSV file with Text,Speaker columns into a Script object.
         *     Results delivered via WebSocket.
         */
        post: operations["csv_to_psss_api_text_workflows_csv_to_psss_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/text-workflows/text-to-psss": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Text To Psss
         * @description Convert text in 'Speaker: Text' format into a Script object.
         *     Results delivered via WebSocket.
         */
        post: operations["text_to_psss_api_text_workflows_text_to_psss_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/text-workflows/text-to-llm-api": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Text To Llm Api
         * @description Process text file using Gemini LLM API to create Script objects.
         *     Results delivered via WebSocket.
         */
        post: operations["text_to_llm_api_api_text_workflows_text_to_llm_api_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/text-workflows/text-to-script-via-ollama": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Text To Script Via Ollama
         * @description Process text using local Ollama LLM to create a Script object.
         *     Results delivered via WebSocket.
         */
        post: operations["text_to_script_via_ollama_api_text_workflows_text_to_script_via_ollama_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/models/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Models
         * @description Get a list of all available models and their default workflow configurations.
         *
         *     Returns:
         *         ModelsResponse containing list of model workflows
         */
        get: operations["get_models_api_models__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/models/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Services Status
         * @description Get the health status of all microservices.
         *
         *     Returns:
         *         ServicesStatusResponse containing health information for each service
         */
        get: operations["get_services_status_api_models_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/logs/stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stream Logs
         * @description Stream server logs in real-time using Server-Sent Events (SSE).
         *
         *     Returns:
         *         StreamingResponse: SSE stream of log entries
         */
        get: operations["stream_logs_api_logs_stream_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/logs/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Log History
         * @description Get the last N lines of the log file for historical viewing.
         *
         *     Args:
         *         lines: Number of recent log lines to return (default 100)
         *
         *     Returns:
         *         dict: Contains the recent log lines
         */
        get: operations["get_log_history_api_logs_history_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_download/sampler_dataset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Download Sampler Dataset
         * @description Download the tts-voices-sampler dataset from Hugging Face.
         *
         *     Downloads the "nick-mccormick/tts-voices-sampler" dataset to files/input/sampler/.
         *
         *     Args:
         *         request: Download configuration options
         *
         *     Returns:
         *         Download status and information
         */
        post: operations["download_sampler_dataset_api_data_download_sampler_dataset_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_download/status/sampler_dataset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check Sampler Dataset Status
         * @description Check the download status of sampler dataset.
         *
         *     Returns information about whether the dataset is downloaded and its size.
         *
         *     Returns:
         *         Status information about the dataset
         */
        get: operations["check_sampler_dataset_status_api_data_download_status_sampler_dataset_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_download/anita_dataset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Download Anita Dataset
         * @description Download the ANITA dataset from Hugging Face.
         *
         *     Downloads the "nick-mccormick/ANITA" dataset to files/input/csv/ANITA/.
         *
         *     Args:
         *         request: Download configuration options
         *
         *     Returns:
         *         Download status and information
         */
        post: operations["download_anita_dataset_api_data_download_anita_dataset_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_download/status/anita_dataset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check Anita Dataset Status
         * @description Check the download status of ANITA dataset.
         *
         *     Returns information about whether the dataset is downloaded and its size.
         *
         *     Returns:
         *         Status information about the dataset
         */
        get: operations["check_anita_dataset_status_api_data_download_status_anita_dataset_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Root */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * ActorData
         * @description Data for an actor
         */
        ActorData: {
            /**
             * Type
             * @default actor
             * @constant
             * @enum {string}
             */
            type: "actor";
            /**
             * Clip Path
             * @default
             */
            clip_path: string | null;
            /**
             * Clip Transcription
             * @default
             */
            clip_transcription: string | null;
            /**
             * Notes
             * @default
             */
            notes: string | null;
            /**
             * Is Favorite
             * @default false
             */
            is_favorite: boolean | null;
        };
        /**
         * BetweenLineElement
         * @description Element that appears between script lines in the grid
         */
        BetweenLineElement: {
            /** Content */
            content: string;
            /** Element Type */
            element_type: string;
        };
        /** Body_upload_file_api_files_upload_post */
        Body_upload_file_api_files_upload_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /**
         * CsvToPsssRequest
         * @description Request model for CSV to PSSS workflow
         */
        CsvToPsssRequest: {
            /** Filepath */
            filepath: string;
        };
        /**
         * DirectoryInfo
         * @description Directory information structure matching frontend DirectoryInfo type
         */
        DirectoryInfo: {
            /** Name */
            name: string;
            /**
             * Type
             * @constant
             * @enum {string}
             */
            type: "directory";
            /** Path */
            path: string;
            /** Files */
            files: components["schemas"]["FileInfo"][];
            /** Directories */
            directories: components["schemas"]["DirectoryInfo"][];
            /** Error */
            error?: string | null;
        };
        /**
         * DownloadRequest
         * @description Base model for download requests
         */
        DownloadRequest: {
            /**
             * Force Download
             * @default false
             */
            force_download: boolean | null;
            /**
             * Resume Download
             * @default true
             */
            resume_download: boolean | null;
        };
        /**
         * DownloadResponse
         * @description Response model for download operations
         */
        DownloadResponse: {
            /** Status */
            status: string;
            /** Message */
            message: string;
            /** Download Path */
            download_path: string;
            /** Size Info */
            size_info?: string | null;
        };
        /**
         * ExecutionResponse
         * @description Response model for workflow execution confirmation
         */
        ExecutionResponse: {
            /** Execution Id */
            execution_id: string;
            /** Message */
            message: string;
        };
        /** ExportTimelineRequest */
        ExportTimelineRequest: {
            script: components["schemas"]["Script-Input"];
            /** Output Subfolder */
            output_subfolder: string;
        };
        /** ExportTimelineResponse */
        ExportTimelineResponse: {
            /** Message */
            message: string;
            /** Output File Path */
            output_file_path: string;
        };
        /**
         * FileInfo
         * @description File information structure matching frontend FileInfo type
         */
        FileInfo: {
            /** Path */
            path: string;
            /** Name */
            name: string;
            /**
             * Type
             * @constant
             * @enum {string}
             */
            type: "file";
            /**
             * Size
             * @default 0
             */
            size: number | null;
            /**
             * Extension
             * @default
             */
            extension: string | null;
            /**
             * File Type
             * @enum {string}
             */
            file_type: "audio" | "text" | "actor" | "script" | "voice_mode" | "other";
            actor_data?: components["schemas"]["ActorData"] | null;
            voice_mode_data?: components["schemas"]["VoiceModeData"] | null;
        };
        /** FileListResponse */
        FileListResponse: {
            directory_structure: components["schemas"]["DirectoryInfo"];
            /** Flat Files */
            flat_files: components["schemas"]["FileInfo"][];
            /** Total Files */
            total_files: number;
        };
        /** GenericSaveRequest */
        GenericSaveRequest: {
            /** Directory Type */
            directory_type: string;
            /** Filename */
            filename: string;
            /** Content */
            content: Record<string, never>;
        };
        /** GenericSaveResponse */
        GenericSaveResponse: {
            /** Filename */
            filename: string;
            /** Directory Type */
            directory_type: string;
            /** Message */
            message: string;
            /** Saved Path */
            saved_path: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** ModelMetadata */
        ModelMetadata: {
            /** Model Name */
            model_name: string;
            /** Voice Clone Tips */
            voice_clone_tips: string[];
            /** Workflows */
            workflows: components["schemas"]["ModelWorkflow"][];
        };
        /** ModelWorkflow */
        ModelWorkflow: {
            /** Name */
            name: string;
            /** Steps */
            steps: string[];
        };
        /**
         * ModelsResponse
         * @description Response model for available models and their workflows
         */
        ModelsResponse: {
            /** Models */
            models: components["schemas"]["ModelMetadata"][];
        };
        /** SaveScriptRequest */
        SaveScriptRequest: {
            /** Directory Type */
            directory_type: string;
            /** Filename */
            filename: string;
            script: components["schemas"]["Script-Input"];
        };
        /**
         * Script
         * @description A script with history grid and speaker mappings
         */
        "Script-Input": {
            /**
             * Type
             * @constant
             * @enum {string}
             */
            type: "script";
            /**
             * Title
             * @default
             */
            title: string;
            history_grid: components["schemas"]["ScriptHistoryGrid-Input"];
            /** Speaker To Actor Map */
            speaker_to_actor_map: {
                [key: string]: string;
            };
            /** Speaker To Voice Mode Map */
            speaker_to_voice_mode_map: {
                [key: string]: string;
            };
        };
        /**
         * Script
         * @description A script with history grid and speaker mappings
         */
        "Script-Output": {
            /**
             * Type
             * @constant
             * @enum {string}
             */
            type: "script";
            /**
             * Title
             * @default
             */
            title: string;
            history_grid: components["schemas"]["ScriptHistoryGrid-Output"];
            /** Speaker To Actor Map */
            speaker_to_actor_map: {
                [key: string]: string;
            };
            /** Speaker To Voice Mode Map */
            speaker_to_voice_mode_map: {
                [key: string]: string;
            };
        };
        /**
         * ScriptHistoryGrid
         * @description Grid structure for script history tracking
         */
        "ScriptHistoryGrid-Input": {
            /** Grid */
            grid: components["schemas"]["ScriptHistoryGridRow"][];
            /** Between Lines Elements */
            between_lines_elements: components["schemas"]["BetweenLineElement"][];
        };
        /**
         * ScriptHistoryGrid
         * @description Grid structure for script history tracking
         */
        "ScriptHistoryGrid-Output": {
            /** Grid */
            grid: components["schemas"]["ScriptHistoryGridRow"][];
            /** Between Lines Elements */
            between_lines_elements: components["schemas"]["BetweenLineElement"][];
        };
        /**
         * ScriptHistoryGridCell
         * @description A single cell in the script history grid
         */
        ScriptHistoryGridCell: {
            /**
             * Hide
             * @default false
             */
            hide: boolean;
            /**
             * Height
             * @default 1
             */
            height: number;
            /**
             * Texts
             * @default []
             */
            texts: string[];
            /**
             * Speakers
             * @default []
             */
            speakers: string[];
            /**
             * Actors
             * @default []
             */
            actors: string[];
            /**
             * Voice Mode
             * @default
             */
            voice_mode: string;
            /** Generated Filepath */
            generated_filepath: string;
            /**
             * Waveform Data
             * @default []
             */
            waveform_data: number[];
        };
        /**
         * ScriptHistoryGridRow
         * @description A single row in the script history grid
         */
        ScriptHistoryGridRow: {
            /** Current Index */
            current_index: number;
            /** Cells */
            cells: components["schemas"]["ScriptHistoryGridCell"][];
        };
        /** ScriptResponse */
        ScriptResponse: {
            /** Filename */
            filename: string;
            script: components["schemas"]["Script-Output"];
        };
        /**
         * ServiceStatus
         * @description Status information for a single microservice
         */
        ServiceStatus: {
            /** Service Name */
            service_name: string;
            /** Port */
            port: number;
            /** Is Running */
            is_running: boolean;
            /** Health Data */
            health_data?: Record<string, never> | null;
            /** Error Message */
            error_message?: string | null;
        };
        /**
         * ServicesStatusResponse
         * @description Response model for microservices status
         */
        ServicesStatusResponse: {
            /** Services */
            services: components["schemas"]["ServiceStatus"][];
        };
        /** Step */
        Step: {
            /** Name */
            name: string;
            /** Display Name */
            display_name: string;
            /** Description */
            description: string;
            /** Input Type */
            input_type: string;
            /** Output Type */
            output_type: string;
            /** Category */
            category: string;
            /**
             * Step Type
             * @enum {string}
             */
            step_type: "start_step" | "pre_generation_step" | "generation_step" | "post_generation_step";
            /** Version */
            version: string;
            /** Parameters */
            parameters: Record<string, never>;
            /** Model Requirement */
            model_requirement?: string | null;
            /**
             * Multi Speaker
             * @default false
             */
            multi_speaker: boolean;
        };
        /**
         * StepExecutionRequest
         * @description Request model for executing steps on text input
         */
        StepExecutionRequest: {
            /** Texts */
            texts?: string[] | null;
            /** Steps */
            steps: string[];
            /** Voice Clone Paths */
            voice_clone_paths: string[];
            /** Audio Transcriptions */
            audio_transcriptions: string[];
            /**
             * Parameters
             * @default {}
             */
            parameters: Record<string, never> | null;
            /**
             * Output Subfolder
             * @default
             */
            output_subfolder: string;
            /**
             * Output File Name
             * @default
             */
            output_file_name: string;
        };
        /** TextContentResponse */
        TextContentResponse: {
            /** Filename */
            filename: string;
            /** Content */
            content: string;
            /** Size */
            size: number;
        };
        /**
         * TextToLlmApiRequest
         * @description Request model for Text to LLM API workflow
         */
        TextToLlmApiRequest: {
            /** Filepath */
            filepath?: string | null;
            /** Text */
            text?: string | null;
            /** Api Key */
            api_key: string;
        };
        /**
         * TextToPsssRequest
         * @description Request model for Text to PSSS workflow
         */
        TextToPsssRequest: {
            /** Text */
            text: string;
        };
        /** TextToScriptViaOllamaRequest */
        TextToScriptViaOllamaRequest: {
            /** Filepath */
            filepath?: string | null;
            /** Text */
            text?: string | null;
            /** Ollama Url */
            ollama_url?: string | null;
            /** Model Name */
            model_name?: string | null;
        };
        /** UploadFileResponse */
        UploadFileResponse: {
            /** Filename */
            filename: string;
            /** Original Filename */
            original_filename: string;
            /** File Path */
            file_path: string;
            file_info: components["schemas"]["FileInfo"];
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * VoiceModeData
         * @description Data for a voice mode
         */
        VoiceModeData: {
            /**
             * Type
             * @default voice_mode
             * @constant
             * @enum {string}
             */
            type: "voice_mode";
            /**
             * Steps
             * @default []
             */
            steps: components["schemas"]["Step"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    list_files_api_files_list_get: {
        parameters: {
            query?: {
                directory_type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    serve_file_api_files_serve__filename__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                filename: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_file_text_content_api_files_textcontent__filename__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                filename: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TextContentResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    save_generic_file_api_files_save_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GenericSaveRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericSaveResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    save_script_api_files_save_script_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SaveScriptRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericSaveResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    load_script_api_files_load_script__filename__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                filename: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScriptResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_file_api_files_upload_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_file_api_files_upload_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadFileResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    export_timeline_api_files_export_timeline_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExportTimelineRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExportTimelineResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_steps_api_steps__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>[];
                };
            };
        };
    };
    execute_steps_background_api_steps_execute_background_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StepExecutionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reload_steps_api_steps_reload_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    csv_to_psss_api_text_workflows_csv_to_psss_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CsvToPsssRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExecutionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    text_to_psss_api_text_workflows_text_to_psss_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TextToPsssRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExecutionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    text_to_llm_api_api_text_workflows_text_to_llm_api_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TextToLlmApiRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExecutionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    text_to_script_via_ollama_api_text_workflows_text_to_script_via_ollama_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TextToScriptViaOllamaRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExecutionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_models_api_models__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModelsResponse"];
                };
            };
        };
    };
    get_services_status_api_models_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServicesStatusResponse"];
                };
            };
        };
    };
    stream_logs_api_logs_stream_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_log_history_api_logs_history_get: {
        parameters: {
            query?: {
                lines?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    download_sampler_dataset_api_data_download_sampler_dataset_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DownloadRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    check_sampler_dataset_status_api_data_download_status_sampler_dataset_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadResponse"];
                };
            };
        };
    };
    download_anita_dataset_api_data_download_anita_dataset_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DownloadRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    check_anita_dataset_status_api_data_download_status_anita_dataset_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadResponse"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
